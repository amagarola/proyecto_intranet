apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ include "intranet.fullname" . }}"
  labels:
    {{- include "intranet.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: "{{ include "intranet.name" . }}"
  template:
    metadata:
      labels:
        app: "{{ include "intranet.name" . }}"
    spec:
      nodeSelector:
        node-role.kubernetes.io/worker: 'true'
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "intranet.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
        - name: intranet-app
          image: "{{ .Values.intranet.image.repository }}:{{ .Values.intranet.image.tag }}"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.intranet.resources }}
          resources:
            {{- toYaml .Values.intranet.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
          - name: WORDPRESS_USERNAME
            value: "{{ .Values.intranet.username }}"
          - name: WORDPRESS_PASSWORD
            value: "{{ .Values.intranet.password }}"
          - name: WORDPRESS_EMAIL
            value: "{{ .Values.intranet.email }}"
          - name: WORDPRESS_BLOG_NAME
            value: "{{ .Values.intranet.siteName }}"
          {{- if .Values.intranet.externalDatabase.enabled }}
          - name: WORDPRESS_DATABASE_HOST
            value: "{{ .Values.intranet.externalDatabase.host }}"
          - name: WORDPRESS_DATABASE_PORT_NUMBER
            value: "{{ .Values.intranet.externalDatabase.port | toString }}"
          - name: WORDPRESS_DATABASE_NAME
            value: "{{ .Values.intranet.externalDatabase.name }}"
          - name: WORDPRESS_DATABASE_USER
            value: "{{ .Values.intranet.externalDatabase.user }}"
          - name: WORDPRESS_DATABASE_PASSWORD
            {{- if .Values.intranet.externalDatabase.existingSecret }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.intranet.externalDatabase.existingSecret }}
                key: {{ .Values.intranet.externalDatabase.existingSecretPasswordKey }}
            {{- else }}
            value: "{{ .Values.intranet.externalDatabase.password }}"
            {{- end }}
          {{- else if .Values.mariadb.enabled }}
          - name: WORDPRESS_DATABASE_HOST
            value: "{{ .Release.Name }}-mariadb"
          - name: WORDPRESS_DATABASE_PORT_NUMBER
            value: "3306"
          - name: WORDPRESS_DATABASE_NAME
            value: "{{ .Values.mariadb.auth.database }}"
          - name: WORDPRESS_DATABASE_USER
            value: "{{ .Values.mariadb.auth.username }}"
          - name: WORDPRESS_DATABASE_PASSWORD
            value: "{{ .Values.mariadb.auth.password }}"
          {{- end }}
          {{- if .Values.intranet.extraEnvVars }}
          {{- toYaml .Values.intranet.extraEnvVars | nindent 12 }}
          {{- end }}
          {{- if .Values.intranet.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.intranet.livenessProbe.httpGet.path }}
              port: {{ .Values.intranet.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.intranet.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.intranet.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.intranet.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.intranet.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.intranet.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.intranet.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.intranet.readinessProbe.httpGet.path }}
              port: {{ .Values.intranet.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.intranet.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.intranet.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.intranet.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.intranet.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.intranet.readinessProbe.successThreshold }}
          {{- end }}
          volumeMounts:
            - mountPath: /bitnami/wordpress
              name: intranet-storage
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    sleep 60
                    set -x
                    exec > /bitnami/wordpress/poststart.log 2>&1
                    apt install -y jq
                    # Instalar plugins desde Helm values
                    for plugin in $(echo "{{ join " " .Values.intranet.plugins }}"); do
                      wp plugin install "$plugin" --activate --allow-root
                    done
                    
                    # Instalar tema
                    wp theme install twentytwentyone --activate --allow-root

                    # Funci√≥n para asegurar una p√°gina √∫nica
                    ensure_unique_page() {
                      local title="$1"
                      local content="$2"
                      echo "‚ñ∂Ô∏è Procesando p√°gina: $title"

                      local ids
                      ids=$(wp post list --post_type=page --format=json --allow-root | jq -r ".[] | select(.post_title==\"$title\") | .ID")

                      local count
                      count=$(echo "$ids" | wc -w)

                      if [ "$count" -gt 1 ]; then
                        echo "‚ö†Ô∏è M√∫ltiples p√°ginas encontradas para '$title'. Eliminando..."
                        for id in $ids; do
                          wp post delete "$id" --force --allow-root
                        done
                        count=0
                      fi

                      if [ "$count" -eq 0 ]; then
                        echo "üÜï Creando p√°gina '$title'"
                        wp post create --post_type=page --post_title="$title" --post_status=publish --post_content="$content" --allow-root
                      else
                        echo "‚úÖ P√°gina '$title' ya existe correctamente."
                      fi
                    }

                    # Crear todas las p√°ginas necesarias
                    ensure_unique_page "Mantenimiento" '<div style="text-align:center;padding:40px"><h1>En mantenimiento</h1><p>La intranet est√° temporalmente fuera de servicio por tareas de mantenimiento.</p>'
                    ensure_unique_page "Inicio" ""
                    ensure_unique_page "Documentos" ""
                    ensure_unique_page "Noticias" ""
                    ensure_unique_page "Directorio" ""
                    ensure_unique_page "Control Horario" '[timeclock]'
                    echo "‚úÖ postStart terminado" >> /bitnami/wordpress/poststart.log


      volumes:
        - name: intranet-storage
          persistentVolumeClaim:
            claimName: "{{ include "intranet.fullname" . }}-pvc"
        - name: valid-pages
          configMap:
            name: valid-pages
